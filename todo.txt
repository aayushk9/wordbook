Backend routes

- /createbook => create a book with book name, code gets generaterd and save details in db
- /verifycode => code verification
- /openbook => enter code (open book) if code correct (verify from db) send user to book else send error
- /book => in a book  (have a word, meaning and usecase per day)  share button to share your book

Models

 1. User model (saves user id, user name code and has a relation with word model)
 2. Word Book model (saves word_id, word name, word meaning, word usecase and relation to user model)

 Logic 

- when user creates book they get thir first name from file or ai, whereas existing or words which came
    already from file will be rendered in book from db

 - Code verification (when book is created): when we genrated a random code (nanoid) we verify it with what user typed 
   if(enteredCide == generatedCode) correct else wrong
 - Code verification (when already book exists): if(entered code == codeFromDb) correct else wrong

 - /book Logic -> render past days word, etc from db and check if user has opend book for the first time in this day 
                  if yes fetch word from outside else show existing ones from db

- frontend logic:  

unauthenticated pages: 

createbook api expects an username as input and gives us and generated code (saved code and username in db)
verifycode api expects code (generated code) as a input and if correct redirects to book
openbook api expects username and code as input and if correct redirects to book 

authenticated page:

book api expects a token (jwt)


